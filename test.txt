
> Task :compileJava UP-TO-DATE
> Task :processResources UP-TO-DATE
> Task :classes UP-TO-DATE
> Task :compileTestJava UP-TO-DATE
> Task :processTestResources
> Task :testClasses
> Task :test

group 0:
<root → · script, [$END$]>
<script → · items, [$END$]>
<script → · ε, [$END$]>
<items → · item, [$END$, id, $int, $double, $bool, $string, $void]>
<type → · baseType, [[, id]>
<items → · items item, [$END$, id, $int, $double, $bool, $string, $void]>
<type → · type [ ], [[, id]>
<item → · field, [$END$, id, $int, $double, $bool, $string, $void]>
<baseType → · $int, [[, id]>
<item → · func, [$END$, id, $int, $double, $bool, $string, $void]>
<baseType → · $double, [[, id]>
<func → · type funcName ( funcArgDef ) { stmts }, [$END$, id, $int, $double, $bool, $string, $void]>
<baseType → · $bool, [[, id]>
<baseType → · $string, [[, id]>
<baseType → · $void, [[, id]>
<fieldName → · id, [=]>
<field → · type fieldName ;, [$END$, id, $int, $double, $bool, $string, $void]>
<field → · type fieldName = expr ;, [$END$, id, $int, $double, $bool, $string, $void]>
<field → · fieldName = expr ;, [$END$, id, $int, $double, $bool, $string, $void]>
GOTO          input:script                  to:1
GOTO          input:items                   to:2
REDUCE        forward:$END$                 prod:script → ε
GOTO          input:item                    to:3
GOTO          input:baseType                to:14
GOTO          input:type                    to:6
GOTO          input:field                   to:4
SHIFT         input:$int                    next:8
GOTO          input:func                    to:5
SHIFT         input:$double                 next:9
SHIFT         input:$bool                   next:10
SHIFT         input:$string                 next:11
SHIFT         input:$void                   next:12
SHIFT         input:id                      next:7
GOTO          input:fieldName               to:13

group 1:
<root → script ·, [$END$]>
ACCEPT    forward:$END$

group 2:
<script → items ·, [$END$]>
<type → · baseType, [[, id]>
<type → · type [ ], [[, id]>
<items → items · item, [$END$, id, $int, $double, $bool, $string, $void]>
<item → · field, [$END$, id, $int, $double, $bool, $string, $void]>
<baseType → · $int, [[, id]>
<item → · func, [$END$, id, $int, $double, $bool, $string, $void]>
<baseType → · $double, [[, id]>
<func → · type funcName ( funcArgDef ) { stmts }, [$END$, id, $int, $double, $bool, $string, $void]>
<baseType → · $bool, [[, id]>
<baseType → · $string, [[, id]>
<baseType → · $void, [[, id]>
<fieldName → · id, [=]>
<field → · type fieldName ;, [$END$, id, $int, $double, $bool, $string, $void]>
<field → · type fieldName = expr ;, [$END$, id, $int, $double, $bool, $string, $void]>
<field → · fieldName = expr ;, [$END$, id, $int, $double, $bool, $string, $void]>
REDUCE        forward:$END$                 prod:script → items
GOTO          input:baseType                to:14
GOTO          input:type                    to:6
GOTO          input:item                    to:145
GOTO          input:field                   to:4
SHIFT         input:$int                    next:8
GOTO          input:func                    to:5
SHIFT         input:$double                 next:9
SHIFT         input:$bool                   next:10
SHIFT         input:$string                 next:11
SHIFT         input:$void                   next:12
SHIFT         input:id                      next:7
GOTO          input:fieldName               to:13

group 3:
<items → item ·, [$END$, id, $int, $double, $bool, $string, $void]>
REDUCE        forward:$END$                 prod:items → item
REDUCE        forward:id                    prod:items → item
REDUCE        forward:$int                  prod:items → item
REDUCE        forward:$double               prod:items → item
REDUCE        forward:$bool                 prod:items → item
REDUCE        forward:$string               prod:items → item
REDUCE        forward:$void                 prod:items → item

group 4:
<item → field ·, [$END$, id, $int, $double, $bool, $string, $void]>
REDUCE        forward:$END$                 prod:item → field
REDUCE        forward:id                    prod:item → field
REDUCE        forward:$int                  prod:item → field
REDUCE        forward:$double               prod:item → field
REDUCE        forward:$bool                 prod:item → field
REDUCE        forward:$string               prod:item → field
REDUCE        forward:$void                 prod:item → field

group 5:
<item → func ·, [$END$, id, $int, $double, $bool, $string, $void]>
REDUCE        forward:$END$                 prod:item → func
REDUCE        forward:id                    prod:item → func
REDUCE        forward:$int                  prod:item → func
REDUCE        forward:$double               prod:item → func
REDUCE        forward:$bool                 prod:item → func
REDUCE        forward:$string               prod:item → func
REDUCE        forward:$void                 prod:item → func

group 6:
<type → type · [ ], [[, id]>
<func → type · funcName ( funcArgDef ) { stmts }, [$END$, id, $int, $double, $bool, $string, $void]>
<field → type · fieldName = expr ;, [$END$, id, $int, $double, $bool, $string, $void]>
<funcName → · id, [(]>
<field → type · fieldName ;, [$END$, id, $int, $double, $bool, $string, $void]>
<fieldName → · id, [;, =]>
SHIFT         input:[                       next:88
GOTO          input:funcName                to:89
GOTO          input:fieldName               to:87
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23

group 7:
<fieldName → id ·, [;, =]>
REDUCE        forward:;                     prod:fieldName → id
REDUCE        forward:=                     prod:fieldName → id

group 8:
<baseType → $int ·, [), }, [, ,, id, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:baseType → $int
REDUCE        forward:}                     prod:baseType → $int
REDUCE        forward:[                     prod:baseType → $int
REDUCE        forward:,                     prod:baseType → $int
REDUCE        forward:id                    prod:baseType → $int
REDUCE        forward:]                     prod:baseType → $int
REDUCE        forward:;                     prod:baseType → $int
REDUCE        forward:+                     prod:baseType → $int
REDUCE        forward:-                     prod:baseType → $int
REDUCE        forward:*                     prod:baseType → $int
REDUCE        forward:/                     prod:baseType → $int
REDUCE        forward:rShift                prod:baseType → $int
REDUCE        forward:lShift                prod:baseType → $int
REDUCE        forward:^                     prod:baseType → $int
REDUCE        forward:&                     prod:baseType → $int
REDUCE        forward:|                     prod:baseType → $int
REDUCE        forward:sAnd                  prod:baseType → $int
REDUCE        forward:sOr                   prod:baseType → $int
REDUCE        forward:equals                prod:baseType → $int
REDUCE        forward:>                     prod:baseType → $int
REDUCE        forward:<                     prod:baseType → $int
REDUCE        forward:greaterEquals         prod:baseType → $int
REDUCE        forward:lessEquals            prod:baseType → $int

group 9:
<baseType → $double ·, [), }, [, ,, id, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:baseType → $double
REDUCE        forward:}                     prod:baseType → $double
REDUCE        forward:[                     prod:baseType → $double
REDUCE        forward:,                     prod:baseType → $double
REDUCE        forward:id                    prod:baseType → $double
REDUCE        forward:]                     prod:baseType → $double
REDUCE        forward:;                     prod:baseType → $double
REDUCE        forward:+                     prod:baseType → $double
REDUCE        forward:-                     prod:baseType → $double
REDUCE        forward:*                     prod:baseType → $double
REDUCE        forward:/                     prod:baseType → $double
REDUCE        forward:rShift                prod:baseType → $double
REDUCE        forward:lShift                prod:baseType → $double
REDUCE        forward:^                     prod:baseType → $double
REDUCE        forward:&                     prod:baseType → $double
REDUCE        forward:|                     prod:baseType → $double
REDUCE        forward:sAnd                  prod:baseType → $double
REDUCE        forward:sOr                   prod:baseType → $double
REDUCE        forward:equals                prod:baseType → $double
REDUCE        forward:>                     prod:baseType → $double
REDUCE        forward:<                     prod:baseType → $double
REDUCE        forward:greaterEquals         prod:baseType → $double
REDUCE        forward:lessEquals            prod:baseType → $double

group 10:
<baseType → $bool ·, [), }, [, ,, id, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:baseType → $bool
REDUCE        forward:}                     prod:baseType → $bool
REDUCE        forward:[                     prod:baseType → $bool
REDUCE        forward:,                     prod:baseType → $bool
REDUCE        forward:id                    prod:baseType → $bool
REDUCE        forward:]                     prod:baseType → $bool
REDUCE        forward:;                     prod:baseType → $bool
REDUCE        forward:+                     prod:baseType → $bool
REDUCE        forward:-                     prod:baseType → $bool
REDUCE        forward:*                     prod:baseType → $bool
REDUCE        forward:/                     prod:baseType → $bool
REDUCE        forward:rShift                prod:baseType → $bool
REDUCE        forward:lShift                prod:baseType → $bool
REDUCE        forward:^                     prod:baseType → $bool
REDUCE        forward:&                     prod:baseType → $bool
REDUCE        forward:|                     prod:baseType → $bool
REDUCE        forward:sAnd                  prod:baseType → $bool
REDUCE        forward:sOr                   prod:baseType → $bool
REDUCE        forward:equals                prod:baseType → $bool
REDUCE        forward:>                     prod:baseType → $bool
REDUCE        forward:<                     prod:baseType → $bool
REDUCE        forward:greaterEquals         prod:baseType → $bool
REDUCE        forward:lessEquals            prod:baseType → $bool

group 11:
<baseType → $string ·, [), }, [, ,, id, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:baseType → $string
REDUCE        forward:}                     prod:baseType → $string
REDUCE        forward:[                     prod:baseType → $string
REDUCE        forward:,                     prod:baseType → $string
REDUCE        forward:id                    prod:baseType → $string
REDUCE        forward:]                     prod:baseType → $string
REDUCE        forward:;                     prod:baseType → $string
REDUCE        forward:+                     prod:baseType → $string
REDUCE        forward:-                     prod:baseType → $string
REDUCE        forward:*                     prod:baseType → $string
REDUCE        forward:/                     prod:baseType → $string
REDUCE        forward:rShift                prod:baseType → $string
REDUCE        forward:lShift                prod:baseType → $string
REDUCE        forward:^                     prod:baseType → $string
REDUCE        forward:&                     prod:baseType → $string
REDUCE        forward:|                     prod:baseType → $string
REDUCE        forward:sAnd                  prod:baseType → $string
REDUCE        forward:sOr                   prod:baseType → $string
REDUCE        forward:equals                prod:baseType → $string
REDUCE        forward:>                     prod:baseType → $string
REDUCE        forward:<                     prod:baseType → $string
REDUCE        forward:greaterEquals         prod:baseType → $string
REDUCE        forward:lessEquals            prod:baseType → $string

group 12:
<baseType → $void ·, [), }, [, ,, id, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:baseType → $void
REDUCE        forward:}                     prod:baseType → $void
REDUCE        forward:[                     prod:baseType → $void
REDUCE        forward:,                     prod:baseType → $void
REDUCE        forward:id                    prod:baseType → $void
REDUCE        forward:]                     prod:baseType → $void
REDUCE        forward:;                     prod:baseType → $void
REDUCE        forward:+                     prod:baseType → $void
REDUCE        forward:-                     prod:baseType → $void
REDUCE        forward:*                     prod:baseType → $void
REDUCE        forward:/                     prod:baseType → $void
REDUCE        forward:rShift                prod:baseType → $void
REDUCE        forward:lShift                prod:baseType → $void
REDUCE        forward:^                     prod:baseType → $void
REDUCE        forward:&                     prod:baseType → $void
REDUCE        forward:|                     prod:baseType → $void
REDUCE        forward:sAnd                  prod:baseType → $void
REDUCE        forward:sOr                   prod:baseType → $void
REDUCE        forward:equals                prod:baseType → $void
REDUCE        forward:>                     prod:baseType → $void
REDUCE        forward:<                     prod:baseType → $void
REDUCE        forward:greaterEquals         prod:baseType → $void
REDUCE        forward:lessEquals            prod:baseType → $void

group 13:
<field → fieldName · = expr ;, [$END$, id, $int, $double, $bool, $string, $void]>
SHIFT         input:=                       next:15

group 14:
<type → baseType ·, [[, id]>
REDUCE        forward:[                     prod:type → baseType
REDUCE        forward:id                    prod:type → baseType

group 15:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<field → fieldName = · expr ;, [$END$, (, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<expr → · expr - expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [[, ;, doublePlus, doubleMinus]>
<var → · var [ expr ], [[, ;, doublePlus, doubleMinus]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:25
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 16:
<expr → double ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:expr → double
REDUCE        forward:}                     prod:expr → double
REDUCE        forward:,                     prod:expr → double
REDUCE        forward:]                     prod:expr → double
REDUCE        forward:;                     prod:expr → double
REDUCE        forward:+                     prod:expr → double
REDUCE        forward:-                     prod:expr → double
REDUCE        forward:*                     prod:expr → double
REDUCE        forward:/                     prod:expr → double
REDUCE        forward:rShift                prod:expr → double
REDUCE        forward:lShift                prod:expr → double
REDUCE        forward:^                     prod:expr → double
REDUCE        forward:&                     prod:expr → double
REDUCE        forward:|                     prod:expr → double
REDUCE        forward:sAnd                  prod:expr → double
REDUCE        forward:sOr                   prod:expr → double
REDUCE        forward:equals                prod:expr → double
REDUCE        forward:>                     prod:expr → double
REDUCE        forward:<                     prod:expr → double
REDUCE        forward:greaterEquals         prod:expr → double
REDUCE        forward:lessEquals            prod:expr → double

group 17:
<expr → $true ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:expr → $true
REDUCE        forward:}                     prod:expr → $true
REDUCE        forward:,                     prod:expr → $true
REDUCE        forward:]                     prod:expr → $true
REDUCE        forward:;                     prod:expr → $true
REDUCE        forward:+                     prod:expr → $true
REDUCE        forward:-                     prod:expr → $true
REDUCE        forward:*                     prod:expr → $true
REDUCE        forward:/                     prod:expr → $true
REDUCE        forward:rShift                prod:expr → $true
REDUCE        forward:lShift                prod:expr → $true
REDUCE        forward:^                     prod:expr → $true
REDUCE        forward:&                     prod:expr → $true
REDUCE        forward:|                     prod:expr → $true
REDUCE        forward:sAnd                  prod:expr → $true
REDUCE        forward:sOr                   prod:expr → $true
REDUCE        forward:equals                prod:expr → $true
REDUCE        forward:>                     prod:expr → $true
REDUCE        forward:<                     prod:expr → $true
REDUCE        forward:greaterEquals         prod:expr → $true
REDUCE        forward:lessEquals            prod:expr → $true

group 18:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → ( · expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), [, doublePlus, doubleMinus]>
<var → · var [ expr ], [), [, doublePlus, doubleMinus]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:85
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 19:
<expr → $false ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:expr → $false
REDUCE        forward:}                     prod:expr → $false
REDUCE        forward:,                     prod:expr → $false
REDUCE        forward:]                     prod:expr → $false
REDUCE        forward:;                     prod:expr → $false
REDUCE        forward:+                     prod:expr → $false
REDUCE        forward:-                     prod:expr → $false
REDUCE        forward:*                     prod:expr → $false
REDUCE        forward:/                     prod:expr → $false
REDUCE        forward:rShift                prod:expr → $false
REDUCE        forward:lShift                prod:expr → $false
REDUCE        forward:^                     prod:expr → $false
REDUCE        forward:&                     prod:expr → $false
REDUCE        forward:|                     prod:expr → $false
REDUCE        forward:sAnd                  prod:expr → $false
REDUCE        forward:sOr                   prod:expr → $false
REDUCE        forward:equals                prod:expr → $false
REDUCE        forward:>                     prod:expr → $false
REDUCE        forward:<                     prod:expr → $false
REDUCE        forward:greaterEquals         prod:expr → $false
REDUCE        forward:lessEquals            prod:expr → $false

group 20:
<exprs → · ε, [}]>
<exprList → · exprList , expr, [}, ,]>
<exprList → · expr, [}, ,]>
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → { · exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [}, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [}, [, doublePlus, doubleMinus]>
<var → · var [ expr ], [}, [, doublePlus, doubleMinus]>
<exprs → · exprList, [}]>
REDUCE        forward:}                     prod:exprs → ε
GOTO          input:exprList                to:74
GOTO          input:expr                    to:72
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:exprs                   to:83
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 21:
<expr → string ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:expr → string
REDUCE        forward:}                     prod:expr → string
REDUCE        forward:,                     prod:expr → string
REDUCE        forward:]                     prod:expr → string
REDUCE        forward:;                     prod:expr → string
REDUCE        forward:+                     prod:expr → string
REDUCE        forward:-                     prod:expr → string
REDUCE        forward:*                     prod:expr → string
REDUCE        forward:/                     prod:expr → string
REDUCE        forward:rShift                prod:expr → string
REDUCE        forward:lShift                prod:expr → string
REDUCE        forward:^                     prod:expr → string
REDUCE        forward:&                     prod:expr → string
REDUCE        forward:|                     prod:expr → string
REDUCE        forward:sAnd                  prod:expr → string
REDUCE        forward:sOr                   prod:expr → string
REDUCE        forward:equals                prod:expr → string
REDUCE        forward:>                     prod:expr → string
REDUCE        forward:<                     prod:expr → string
REDUCE        forward:greaterEquals         prod:expr → string
REDUCE        forward:lessEquals            prod:expr → string

group 22:
<baseType → · $int, [), }, ,, [, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<baseType → · $double, [), }, ,, [, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<baseType → · $bool, [), }, ,, [, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<baseType → · $string, [), }, ,, [, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<baseType → · $void, [), }, ,, [, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → $new · arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<arrDef → · baseType, [), }, ,, [, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<arrDef → · arrDef [ expr ], [), }, ,, [, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:$int                    next:8
SHIFT         input:$double                 next:9
SHIFT         input:$bool                   next:10
SHIFT         input:$string                 next:11
SHIFT         input:$void                   next:12
GOTO          input:arrDef                  to:78
GOTO          input:baseType                to:79

group 23:
<fieldName → id ·, [[, ;, doubleMinus, =]>
<funcName → id ·, [(]>
REDUCE        forward:[                     prod:fieldName → id
REDUCE        forward:;                     prod:fieldName → id
REDUCE        forward:doubleMinus           prod:fieldName → id
REDUCE        forward:=                     prod:fieldName → id
REDUCE        forward:(                     prod:funcName → id

group 24:
<expr → funcName · ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:(                       next:71

group 25:
<expr → expr · rShift expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<field → fieldName = expr · ;, [$END$, (, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<expr → expr · - expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:;                       next:70
SHIFT         input:-                       next:33

group 26:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → + · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:69
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 27:
<expr → var ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → var · doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → var · doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → var · [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:expr → var
REDUCE        forward:}                     prod:expr → var
REDUCE        forward:,                     prod:expr → var
REDUCE        forward:]                     prod:expr → var
REDUCE        forward:;                     prod:expr → var
REDUCE        forward:+                     prod:expr → var
REDUCE        forward:-                     prod:expr → var
REDUCE        forward:*                     prod:expr → var
REDUCE        forward:/                     prod:expr → var
REDUCE        forward:rShift                prod:expr → var
REDUCE        forward:lShift                prod:expr → var
REDUCE        forward:^                     prod:expr → var
REDUCE        forward:&                     prod:expr → var
REDUCE        forward:|                     prod:expr → var
REDUCE        forward:sAnd                  prod:expr → var
REDUCE        forward:sOr                   prod:expr → var
REDUCE        forward:equals                prod:expr → var
REDUCE        forward:>                     prod:expr → var
REDUCE        forward:<                     prod:expr → var
REDUCE        forward:greaterEquals         prod:expr → var
REDUCE        forward:lessEquals            prod:expr → var
SHIFT         input:doubleMinus             next:66
SHIFT         input:doublePlus              next:65
SHIFT         input:[                       next:64

group 28:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → - · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:31
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 29:
<var → fieldName ·, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:var → fieldName
REDUCE        forward:}                     prod:var → fieldName
REDUCE        forward:[                     prod:var → fieldName
REDUCE        forward:,                     prod:var → fieldName
REDUCE        forward:]                     prod:var → fieldName
REDUCE        forward:;                     prod:var → fieldName
REDUCE        forward:doublePlus            prod:var → fieldName
REDUCE        forward:doubleMinus           prod:var → fieldName
REDUCE        forward:+                     prod:var → fieldName
REDUCE        forward:-                     prod:var → fieldName
REDUCE        forward:*                     prod:var → fieldName
REDUCE        forward:/                     prod:var → fieldName
REDUCE        forward:rShift                prod:var → fieldName
REDUCE        forward:lShift                prod:var → fieldName
REDUCE        forward:^                     prod:var → fieldName
REDUCE        forward:&                     prod:var → fieldName
REDUCE        forward:|                     prod:var → fieldName
REDUCE        forward:sAnd                  prod:var → fieldName
REDUCE        forward:sOr                   prod:var → fieldName
REDUCE        forward:equals                prod:var → fieldName
REDUCE        forward:>                     prod:var → fieldName
REDUCE        forward:<                     prod:var → fieldName
REDUCE        forward:greaterEquals         prod:var → fieldName
REDUCE        forward:lessEquals            prod:var → fieldName

group 30:
<expr → int ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:expr → int
REDUCE        forward:}                     prod:expr → int
REDUCE        forward:,                     prod:expr → int
REDUCE        forward:]                     prod:expr → int
REDUCE        forward:;                     prod:expr → int
REDUCE        forward:+                     prod:expr → int
REDUCE        forward:-                     prod:expr → int
REDUCE        forward:*                     prod:expr → int
REDUCE        forward:/                     prod:expr → int
REDUCE        forward:rShift                prod:expr → int
REDUCE        forward:lShift                prod:expr → int
REDUCE        forward:^                     prod:expr → int
REDUCE        forward:&                     prod:expr → int
REDUCE        forward:|                     prod:expr → int
REDUCE        forward:sAnd                  prod:expr → int
REDUCE        forward:sOr                   prod:expr → int
REDUCE        forward:equals                prod:expr → int
REDUCE        forward:>                     prod:expr → int
REDUCE        forward:<                     prod:expr → int
REDUCE        forward:greaterEquals         prod:expr → int
REDUCE        forward:lessEquals            prod:expr → int

group 31:
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → - expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
REDUCE        forward:)                     prod:expr → - expr
REDUCE        forward:}                     prod:expr → - expr
REDUCE        forward:,                     prod:expr → - expr
REDUCE        forward:]                     prod:expr → - expr
REDUCE        forward:;                     prod:expr → - expr
REDUCE        forward:+                     prod:expr → - expr
REDUCE        forward:-                     prod:expr → - expr
REDUCE        forward:*                     prod:expr → - expr
REDUCE        forward:/                     prod:expr → - expr
REDUCE        forward:rShift                prod:expr → - expr
REDUCE        forward:lShift                prod:expr → - expr
REDUCE        forward:^                     prod:expr → - expr
REDUCE        forward:&                     prod:expr → - expr
REDUCE        forward:|                     prod:expr → - expr
REDUCE        forward:sAnd                  prod:expr → - expr
REDUCE        forward:sOr                   prod:expr → - expr
REDUCE        forward:equals                prod:expr → - expr
REDUCE        forward:>                     prod:expr → - expr
REDUCE        forward:<                     prod:expr → - expr
REDUCE        forward:greaterEquals         prod:expr → - expr
REDUCE        forward:lessEquals            prod:expr → - expr
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 32:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr + · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:63
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 33:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → expr - · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:62
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 34:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → expr * · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:61
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 35:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr / · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:60
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 36:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr rShift · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:59
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 37:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr lShift · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:58
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 38:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr ^ · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:57
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 39:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr & · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:56
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 40:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr | · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:55
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 41:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr sAnd · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:54
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 42:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr sOr · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:53
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 43:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr equals · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:52
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 44:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr > · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:51
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 45:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr < · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:50
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 46:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr greaterEquals · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:49
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 47:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr lessEquals · expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:48
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 48:
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr lessEquals expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
REDUCE        forward:)                     prod:expr → expr lessEquals expr
REDUCE        forward:}                     prod:expr → expr lessEquals expr
REDUCE        forward:,                     prod:expr → expr lessEquals expr
REDUCE        forward:]                     prod:expr → expr lessEquals expr
REDUCE        forward:;                     prod:expr → expr lessEquals expr
REDUCE        forward:^                     prod:expr → expr lessEquals expr
REDUCE        forward:&                     prod:expr → expr lessEquals expr
REDUCE        forward:|                     prod:expr → expr lessEquals expr
REDUCE        forward:sAnd                  prod:expr → expr lessEquals expr
REDUCE        forward:sOr                   prod:expr → expr lessEquals expr
REDUCE        forward:>                     prod:expr → expr lessEquals expr
REDUCE        forward:<                     prod:expr → expr lessEquals expr
REDUCE        forward:greaterEquals         prod:expr → expr lessEquals expr
REDUCE        forward:lessEquals            prod:expr → expr lessEquals expr
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 49:
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr greaterEquals expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
REDUCE        forward:)                     prod:expr → expr greaterEquals expr
REDUCE        forward:}                     prod:expr → expr greaterEquals expr
REDUCE        forward:,                     prod:expr → expr greaterEquals expr
REDUCE        forward:]                     prod:expr → expr greaterEquals expr
REDUCE        forward:;                     prod:expr → expr greaterEquals expr
REDUCE        forward:^                     prod:expr → expr greaterEquals expr
REDUCE        forward:&                     prod:expr → expr greaterEquals expr
REDUCE        forward:|                     prod:expr → expr greaterEquals expr
REDUCE        forward:sAnd                  prod:expr → expr greaterEquals expr
REDUCE        forward:sOr                   prod:expr → expr greaterEquals expr
REDUCE        forward:>                     prod:expr → expr greaterEquals expr
REDUCE        forward:<                     prod:expr → expr greaterEquals expr
REDUCE        forward:greaterEquals         prod:expr → expr greaterEquals expr
REDUCE        forward:lessEquals            prod:expr → expr greaterEquals expr
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 50:
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr < expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
REDUCE        forward:)                     prod:expr → expr < expr
REDUCE        forward:}                     prod:expr → expr < expr
REDUCE        forward:,                     prod:expr → expr < expr
REDUCE        forward:]                     prod:expr → expr < expr
REDUCE        forward:;                     prod:expr → expr < expr
REDUCE        forward:^                     prod:expr → expr < expr
REDUCE        forward:&                     prod:expr → expr < expr
REDUCE        forward:|                     prod:expr → expr < expr
REDUCE        forward:sAnd                  prod:expr → expr < expr
REDUCE        forward:sOr                   prod:expr → expr < expr
REDUCE        forward:>                     prod:expr → expr < expr
REDUCE        forward:<                     prod:expr → expr < expr
REDUCE        forward:greaterEquals         prod:expr → expr < expr
REDUCE        forward:lessEquals            prod:expr → expr < expr
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 51:
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr > expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
REDUCE        forward:)                     prod:expr → expr > expr
REDUCE        forward:}                     prod:expr → expr > expr
REDUCE        forward:,                     prod:expr → expr > expr
REDUCE        forward:]                     prod:expr → expr > expr
REDUCE        forward:;                     prod:expr → expr > expr
REDUCE        forward:^                     prod:expr → expr > expr
REDUCE        forward:&                     prod:expr → expr > expr
REDUCE        forward:|                     prod:expr → expr > expr
REDUCE        forward:sAnd                  prod:expr → expr > expr
REDUCE        forward:sOr                   prod:expr → expr > expr
REDUCE        forward:>                     prod:expr → expr > expr
REDUCE        forward:<                     prod:expr → expr > expr
REDUCE        forward:greaterEquals         prod:expr → expr > expr
REDUCE        forward:lessEquals            prod:expr → expr > expr
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 52:
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr equals expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
REDUCE        forward:)                     prod:expr → expr equals expr
REDUCE        forward:}                     prod:expr → expr equals expr
REDUCE        forward:,                     prod:expr → expr equals expr
REDUCE        forward:]                     prod:expr → expr equals expr
REDUCE        forward:;                     prod:expr → expr equals expr
REDUCE        forward:rShift                prod:expr → expr equals expr
REDUCE        forward:lShift                prod:expr → expr equals expr
REDUCE        forward:^                     prod:expr → expr equals expr
REDUCE        forward:&                     prod:expr → expr equals expr
REDUCE        forward:|                     prod:expr → expr equals expr
REDUCE        forward:sAnd                  prod:expr → expr equals expr
REDUCE        forward:sOr                   prod:expr → expr equals expr
REDUCE        forward:equals                prod:expr → expr equals expr
REDUCE        forward:>                     prod:expr → expr equals expr
REDUCE        forward:<                     prod:expr → expr equals expr
REDUCE        forward:greaterEquals         prod:expr → expr equals expr
REDUCE        forward:lessEquals            prod:expr → expr equals expr
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 53:
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr sOr expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
REDUCE        forward:)                     prod:expr → expr sOr expr
REDUCE        forward:}                     prod:expr → expr sOr expr
REDUCE        forward:,                     prod:expr → expr sOr expr
REDUCE        forward:]                     prod:expr → expr sOr expr
REDUCE        forward:;                     prod:expr → expr sOr expr
REDUCE        forward:^                     prod:expr → expr sOr expr
REDUCE        forward:&                     prod:expr → expr sOr expr
REDUCE        forward:|                     prod:expr → expr sOr expr
REDUCE        forward:sAnd                  prod:expr → expr sOr expr
REDUCE        forward:sOr                   prod:expr → expr sOr expr
REDUCE        forward:>                     prod:expr → expr sOr expr
REDUCE        forward:<                     prod:expr → expr sOr expr
REDUCE        forward:greaterEquals         prod:expr → expr sOr expr
REDUCE        forward:lessEquals            prod:expr → expr sOr expr
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 54:
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr sAnd expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
REDUCE        forward:)                     prod:expr → expr sAnd expr
REDUCE        forward:}                     prod:expr → expr sAnd expr
REDUCE        forward:,                     prod:expr → expr sAnd expr
REDUCE        forward:]                     prod:expr → expr sAnd expr
REDUCE        forward:;                     prod:expr → expr sAnd expr
REDUCE        forward:^                     prod:expr → expr sAnd expr
REDUCE        forward:&                     prod:expr → expr sAnd expr
REDUCE        forward:|                     prod:expr → expr sAnd expr
REDUCE        forward:sAnd                  prod:expr → expr sAnd expr
REDUCE        forward:sOr                   prod:expr → expr sAnd expr
REDUCE        forward:>                     prod:expr → expr sAnd expr
REDUCE        forward:<                     prod:expr → expr sAnd expr
REDUCE        forward:greaterEquals         prod:expr → expr sAnd expr
REDUCE        forward:lessEquals            prod:expr → expr sAnd expr
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 55:
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr | expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
REDUCE        forward:)                     prod:expr → expr | expr
REDUCE        forward:}                     prod:expr → expr | expr
REDUCE        forward:,                     prod:expr → expr | expr
REDUCE        forward:]                     prod:expr → expr | expr
REDUCE        forward:;                     prod:expr → expr | expr
REDUCE        forward:^                     prod:expr → expr | expr
REDUCE        forward:&                     prod:expr → expr | expr
REDUCE        forward:|                     prod:expr → expr | expr
REDUCE        forward:sAnd                  prod:expr → expr | expr
REDUCE        forward:sOr                   prod:expr → expr | expr
REDUCE        forward:>                     prod:expr → expr | expr
REDUCE        forward:<                     prod:expr → expr | expr
REDUCE        forward:greaterEquals         prod:expr → expr | expr
REDUCE        forward:lessEquals            prod:expr → expr | expr
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 56:
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr & expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
REDUCE        forward:)                     prod:expr → expr & expr
REDUCE        forward:}                     prod:expr → expr & expr
REDUCE        forward:,                     prod:expr → expr & expr
REDUCE        forward:]                     prod:expr → expr & expr
REDUCE        forward:;                     prod:expr → expr & expr
REDUCE        forward:^                     prod:expr → expr & expr
REDUCE        forward:&                     prod:expr → expr & expr
REDUCE        forward:|                     prod:expr → expr & expr
REDUCE        forward:sAnd                  prod:expr → expr & expr
REDUCE        forward:sOr                   prod:expr → expr & expr
REDUCE        forward:>                     prod:expr → expr & expr
REDUCE        forward:<                     prod:expr → expr & expr
REDUCE        forward:greaterEquals         prod:expr → expr & expr
REDUCE        forward:lessEquals            prod:expr → expr & expr
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 57:
<expr → expr ^ expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:expr → expr ^ expr
REDUCE        forward:}                     prod:expr → expr ^ expr
REDUCE        forward:,                     prod:expr → expr ^ expr
REDUCE        forward:]                     prod:expr → expr ^ expr
REDUCE        forward:;                     prod:expr → expr ^ expr
REDUCE        forward:^                     prod:expr → expr ^ expr
REDUCE        forward:&                     prod:expr → expr ^ expr
REDUCE        forward:|                     prod:expr → expr ^ expr
REDUCE        forward:sAnd                  prod:expr → expr ^ expr
REDUCE        forward:sOr                   prod:expr → expr ^ expr
REDUCE        forward:>                     prod:expr → expr ^ expr
REDUCE        forward:<                     prod:expr → expr ^ expr
REDUCE        forward:greaterEquals         prod:expr → expr ^ expr
REDUCE        forward:lessEquals            prod:expr → expr ^ expr
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 58:
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr lShift expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
REDUCE        forward:)                     prod:expr → expr lShift expr
REDUCE        forward:}                     prod:expr → expr lShift expr
REDUCE        forward:,                     prod:expr → expr lShift expr
REDUCE        forward:]                     prod:expr → expr lShift expr
REDUCE        forward:;                     prod:expr → expr lShift expr
REDUCE        forward:rShift                prod:expr → expr lShift expr
REDUCE        forward:lShift                prod:expr → expr lShift expr
REDUCE        forward:^                     prod:expr → expr lShift expr
REDUCE        forward:&                     prod:expr → expr lShift expr
REDUCE        forward:|                     prod:expr → expr lShift expr
REDUCE        forward:sAnd                  prod:expr → expr lShift expr
REDUCE        forward:sOr                   prod:expr → expr lShift expr
REDUCE        forward:equals                prod:expr → expr lShift expr
REDUCE        forward:>                     prod:expr → expr lShift expr
REDUCE        forward:<                     prod:expr → expr lShift expr
REDUCE        forward:greaterEquals         prod:expr → expr lShift expr
REDUCE        forward:lessEquals            prod:expr → expr lShift expr
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 59:
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr rShift expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
REDUCE        forward:)                     prod:expr → expr rShift expr
REDUCE        forward:}                     prod:expr → expr rShift expr
REDUCE        forward:,                     prod:expr → expr rShift expr
REDUCE        forward:]                     prod:expr → expr rShift expr
REDUCE        forward:;                     prod:expr → expr rShift expr
REDUCE        forward:rShift                prod:expr → expr rShift expr
REDUCE        forward:lShift                prod:expr → expr rShift expr
REDUCE        forward:^                     prod:expr → expr rShift expr
REDUCE        forward:&                     prod:expr → expr rShift expr
REDUCE        forward:|                     prod:expr → expr rShift expr
REDUCE        forward:sAnd                  prod:expr → expr rShift expr
REDUCE        forward:sOr                   prod:expr → expr rShift expr
REDUCE        forward:equals                prod:expr → expr rShift expr
REDUCE        forward:>                     prod:expr → expr rShift expr
REDUCE        forward:<                     prod:expr → expr rShift expr
REDUCE        forward:greaterEquals         prod:expr → expr rShift expr
REDUCE        forward:lessEquals            prod:expr → expr rShift expr
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 60:
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr / expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
REDUCE        forward:)                     prod:expr → expr / expr
REDUCE        forward:}                     prod:expr → expr / expr
REDUCE        forward:,                     prod:expr → expr / expr
REDUCE        forward:]                     prod:expr → expr / expr
REDUCE        forward:;                     prod:expr → expr / expr
REDUCE        forward:+                     prod:expr → expr / expr
REDUCE        forward:-                     prod:expr → expr / expr
REDUCE        forward:*                     prod:expr → expr / expr
REDUCE        forward:/                     prod:expr → expr / expr
REDUCE        forward:rShift                prod:expr → expr / expr
REDUCE        forward:lShift                prod:expr → expr / expr
REDUCE        forward:^                     prod:expr → expr / expr
REDUCE        forward:&                     prod:expr → expr / expr
REDUCE        forward:|                     prod:expr → expr / expr
REDUCE        forward:sAnd                  prod:expr → expr / expr
REDUCE        forward:sOr                   prod:expr → expr / expr
REDUCE        forward:equals                prod:expr → expr / expr
REDUCE        forward:>                     prod:expr → expr / expr
REDUCE        forward:<                     prod:expr → expr / expr
REDUCE        forward:greaterEquals         prod:expr → expr / expr
REDUCE        forward:lessEquals            prod:expr → expr / expr
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 61:
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr * expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
REDUCE        forward:)                     prod:expr → expr * expr
REDUCE        forward:}                     prod:expr → expr * expr
REDUCE        forward:,                     prod:expr → expr * expr
REDUCE        forward:]                     prod:expr → expr * expr
REDUCE        forward:;                     prod:expr → expr * expr
REDUCE        forward:+                     prod:expr → expr * expr
REDUCE        forward:-                     prod:expr → expr * expr
REDUCE        forward:*                     prod:expr → expr * expr
REDUCE        forward:/                     prod:expr → expr * expr
REDUCE        forward:rShift                prod:expr → expr * expr
REDUCE        forward:lShift                prod:expr → expr * expr
REDUCE        forward:^                     prod:expr → expr * expr
REDUCE        forward:&                     prod:expr → expr * expr
REDUCE        forward:|                     prod:expr → expr * expr
REDUCE        forward:sAnd                  prod:expr → expr * expr
REDUCE        forward:sOr                   prod:expr → expr * expr
REDUCE        forward:equals                prod:expr → expr * expr
REDUCE        forward:>                     prod:expr → expr * expr
REDUCE        forward:<                     prod:expr → expr * expr
REDUCE        forward:greaterEquals         prod:expr → expr * expr
REDUCE        forward:lessEquals            prod:expr → expr * expr
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 62:
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr - expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
REDUCE        forward:)                     prod:expr → expr - expr
REDUCE        forward:}                     prod:expr → expr - expr
REDUCE        forward:,                     prod:expr → expr - expr
REDUCE        forward:]                     prod:expr → expr - expr
REDUCE        forward:;                     prod:expr → expr - expr
REDUCE        forward:+                     prod:expr → expr - expr
REDUCE        forward:-                     prod:expr → expr - expr
REDUCE        forward:rShift                prod:expr → expr - expr
REDUCE        forward:lShift                prod:expr → expr - expr
REDUCE        forward:^                     prod:expr → expr - expr
REDUCE        forward:&                     prod:expr → expr - expr
REDUCE        forward:|                     prod:expr → expr - expr
REDUCE        forward:sAnd                  prod:expr → expr - expr
REDUCE        forward:sOr                   prod:expr → expr - expr
REDUCE        forward:equals                prod:expr → expr - expr
REDUCE        forward:>                     prod:expr → expr - expr
REDUCE        forward:<                     prod:expr → expr - expr
REDUCE        forward:greaterEquals         prod:expr → expr - expr
REDUCE        forward:lessEquals            prod:expr → expr - expr
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 63:
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr + expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
REDUCE        forward:)                     prod:expr → expr + expr
REDUCE        forward:}                     prod:expr → expr + expr
REDUCE        forward:,                     prod:expr → expr + expr
REDUCE        forward:]                     prod:expr → expr + expr
REDUCE        forward:;                     prod:expr → expr + expr
REDUCE        forward:+                     prod:expr → expr + expr
REDUCE        forward:-                     prod:expr → expr + expr
REDUCE        forward:rShift                prod:expr → expr + expr
REDUCE        forward:lShift                prod:expr → expr + expr
REDUCE        forward:^                     prod:expr → expr + expr
REDUCE        forward:&                     prod:expr → expr + expr
REDUCE        forward:|                     prod:expr → expr + expr
REDUCE        forward:sAnd                  prod:expr → expr + expr
REDUCE        forward:sOr                   prod:expr → expr + expr
REDUCE        forward:equals                prod:expr → expr + expr
REDUCE        forward:>                     prod:expr → expr + expr
REDUCE        forward:<                     prod:expr → expr + expr
REDUCE        forward:greaterEquals         prod:expr → expr + expr
REDUCE        forward:lessEquals            prod:expr → expr + expr
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 64:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [[, ], doublePlus, doubleMinus]>
<var → · var [ expr ], [[, ], doublePlus, doubleMinus]>
<var → var [ · expr ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:67
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 65:
<expr → var doublePlus ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:expr → var doublePlus
REDUCE        forward:}                     prod:expr → var doublePlus
REDUCE        forward:,                     prod:expr → var doublePlus
REDUCE        forward:]                     prod:expr → var doublePlus
REDUCE        forward:;                     prod:expr → var doublePlus
REDUCE        forward:+                     prod:expr → var doublePlus
REDUCE        forward:-                     prod:expr → var doublePlus
REDUCE        forward:*                     prod:expr → var doublePlus
REDUCE        forward:/                     prod:expr → var doublePlus
REDUCE        forward:rShift                prod:expr → var doublePlus
REDUCE        forward:lShift                prod:expr → var doublePlus
REDUCE        forward:^                     prod:expr → var doublePlus
REDUCE        forward:&                     prod:expr → var doublePlus
REDUCE        forward:|                     prod:expr → var doublePlus
REDUCE        forward:sAnd                  prod:expr → var doublePlus
REDUCE        forward:sOr                   prod:expr → var doublePlus
REDUCE        forward:equals                prod:expr → var doublePlus
REDUCE        forward:>                     prod:expr → var doublePlus
REDUCE        forward:<                     prod:expr → var doublePlus
REDUCE        forward:greaterEquals         prod:expr → var doublePlus
REDUCE        forward:lessEquals            prod:expr → var doublePlus

group 66:
<expr → var doubleMinus ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:expr → var doubleMinus
REDUCE        forward:}                     prod:expr → var doubleMinus
REDUCE        forward:,                     prod:expr → var doubleMinus
REDUCE        forward:]                     prod:expr → var doubleMinus
REDUCE        forward:;                     prod:expr → var doubleMinus
REDUCE        forward:+                     prod:expr → var doubleMinus
REDUCE        forward:-                     prod:expr → var doubleMinus
REDUCE        forward:*                     prod:expr → var doubleMinus
REDUCE        forward:/                     prod:expr → var doubleMinus
REDUCE        forward:rShift                prod:expr → var doubleMinus
REDUCE        forward:lShift                prod:expr → var doubleMinus
REDUCE        forward:^                     prod:expr → var doubleMinus
REDUCE        forward:&                     prod:expr → var doubleMinus
REDUCE        forward:|                     prod:expr → var doubleMinus
REDUCE        forward:sAnd                  prod:expr → var doubleMinus
REDUCE        forward:sOr                   prod:expr → var doubleMinus
REDUCE        forward:equals                prod:expr → var doubleMinus
REDUCE        forward:>                     prod:expr → var doubleMinus
REDUCE        forward:<                     prod:expr → var doubleMinus
REDUCE        forward:greaterEquals         prod:expr → var doubleMinus
REDUCE        forward:lessEquals            prod:expr → var doubleMinus

group 67:
<expr → expr · rShift expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → var [ expr · ], [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:]                       next:68
SHIFT         input:-                       next:33

group 68:
<var → var [ expr ] ·, [), }, [, ,, ], ;, doublePlus, doubleMinus, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:var → var [ expr ]
REDUCE        forward:}                     prod:var → var [ expr ]
REDUCE        forward:[                     prod:var → var [ expr ]
REDUCE        forward:,                     prod:var → var [ expr ]
REDUCE        forward:]                     prod:var → var [ expr ]
REDUCE        forward:;                     prod:var → var [ expr ]
REDUCE        forward:doublePlus            prod:var → var [ expr ]
REDUCE        forward:doubleMinus           prod:var → var [ expr ]
REDUCE        forward:+                     prod:var → var [ expr ]
REDUCE        forward:-                     prod:var → var [ expr ]
REDUCE        forward:*                     prod:var → var [ expr ]
REDUCE        forward:/                     prod:var → var [ expr ]
REDUCE        forward:rShift                prod:var → var [ expr ]
REDUCE        forward:lShift                prod:var → var [ expr ]
REDUCE        forward:^                     prod:var → var [ expr ]
REDUCE        forward:&                     prod:var → var [ expr ]
REDUCE        forward:|                     prod:var → var [ expr ]
REDUCE        forward:sAnd                  prod:var → var [ expr ]
REDUCE        forward:sOr                   prod:var → var [ expr ]
REDUCE        forward:equals                prod:var → var [ expr ]
REDUCE        forward:>                     prod:var → var [ expr ]
REDUCE        forward:<                     prod:var → var [ expr ]
REDUCE        forward:greaterEquals         prod:var → var [ expr ]
REDUCE        forward:lessEquals            prod:var → var [ expr ]

group 69:
<expr → expr · rShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → + expr ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
REDUCE        forward:)                     prod:expr → + expr
REDUCE        forward:}                     prod:expr → + expr
REDUCE        forward:,                     prod:expr → + expr
REDUCE        forward:]                     prod:expr → + expr
REDUCE        forward:;                     prod:expr → + expr
REDUCE        forward:+                     prod:expr → + expr
REDUCE        forward:-                     prod:expr → + expr
REDUCE        forward:*                     prod:expr → + expr
REDUCE        forward:/                     prod:expr → + expr
REDUCE        forward:rShift                prod:expr → + expr
REDUCE        forward:lShift                prod:expr → + expr
REDUCE        forward:^                     prod:expr → + expr
REDUCE        forward:&                     prod:expr → + expr
REDUCE        forward:|                     prod:expr → + expr
REDUCE        forward:sAnd                  prod:expr → + expr
REDUCE        forward:sOr                   prod:expr → + expr
REDUCE        forward:equals                prod:expr → + expr
REDUCE        forward:>                     prod:expr → + expr
REDUCE        forward:<                     prod:expr → + expr
REDUCE        forward:greaterEquals         prod:expr → + expr
REDUCE        forward:lessEquals            prod:expr → + expr
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 70:
<field → fieldName = expr ; ·, [$END$, (, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
REDUCE        forward:$END$                 prod:field → fieldName = expr ;
REDUCE        forward:(                     prod:field → fieldName = expr ;
REDUCE        forward:{                     prod:field → fieldName = expr ;
REDUCE        forward:}                     prod:field → fieldName = expr ;
REDUCE        forward:id                    prod:field → fieldName = expr ;
REDUCE        forward:$int                  prod:field → fieldName = expr ;
REDUCE        forward:$if                   prod:field → fieldName = expr ;
REDUCE        forward:$double               prod:field → fieldName = expr ;
REDUCE        forward:$else                 prod:field → fieldName = expr ;
REDUCE        forward:$bool                 prod:field → fieldName = expr ;
REDUCE        forward:$while                prod:field → fieldName = expr ;
REDUCE        forward:$string               prod:field → fieldName = expr ;
REDUCE        forward:$return               prod:field → fieldName = expr ;
REDUCE        forward:$void                 prod:field → fieldName = expr ;

group 71:
<exprs → · ε, [)]>
<exprList → · exprList , expr, [), ,]>
<exprList → · expr, [), ,]>
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → funcName ( · exprs ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), [, doublePlus, doubleMinus]>
<var → · var [ expr ], [), [, doublePlus, doubleMinus]>
<exprs → · exprList, [)]>
REDUCE        forward:)                     prod:exprs → ε
GOTO          input:exprList                to:74
GOTO          input:expr                    to:72
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
GOTO          input:exprs                   to:73
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 72:
<expr → expr · rShift expr, [), }, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), }, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<exprList → expr ·, [), }, ,]>
<expr → expr · lShift expr, [), }, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
REDUCE        forward:)                     prod:exprList → expr
REDUCE        forward:}                     prod:exprList → expr
REDUCE        forward:,                     prod:exprList → expr
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 73:
<expr → funcName ( exprs · ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:)                       next:77

group 74:
<exprList → exprList · , expr, [), }, ,]>
<exprs → exprList ·, [), }]>
SHIFT         input:,                       next:75
REDUCE        forward:)                     prod:exprs → exprList
REDUCE        forward:}                     prod:exprs → exprList

group 75:
<exprList → exprList , · expr, [), }, ,]>
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), }, [, ,, doublePlus, doubleMinus]>
<var → · var [ expr ], [), }, [, ,, doublePlus, doubleMinus]>
GOTO          input:expr                    to:76
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 76:
<expr → expr · rShift expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<exprList → exprList , expr ·, [), }, ,]>
<expr → expr · ^ expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), }, ,, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
REDUCE        forward:)                     prod:exprList → exprList , expr
REDUCE        forward:}                     prod:exprList → exprList , expr
REDUCE        forward:,                     prod:exprList → exprList , expr
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 77:
<expr → funcName ( exprs ) ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:expr → funcName ( exprs )
REDUCE        forward:}                     prod:expr → funcName ( exprs )
REDUCE        forward:,                     prod:expr → funcName ( exprs )
REDUCE        forward:]                     prod:expr → funcName ( exprs )
REDUCE        forward:;                     prod:expr → funcName ( exprs )
REDUCE        forward:+                     prod:expr → funcName ( exprs )
REDUCE        forward:-                     prod:expr → funcName ( exprs )
REDUCE        forward:*                     prod:expr → funcName ( exprs )
REDUCE        forward:/                     prod:expr → funcName ( exprs )
REDUCE        forward:rShift                prod:expr → funcName ( exprs )
REDUCE        forward:lShift                prod:expr → funcName ( exprs )
REDUCE        forward:^                     prod:expr → funcName ( exprs )
REDUCE        forward:&                     prod:expr → funcName ( exprs )
REDUCE        forward:|                     prod:expr → funcName ( exprs )
REDUCE        forward:sAnd                  prod:expr → funcName ( exprs )
REDUCE        forward:sOr                   prod:expr → funcName ( exprs )
REDUCE        forward:equals                prod:expr → funcName ( exprs )
REDUCE        forward:>                     prod:expr → funcName ( exprs )
REDUCE        forward:<                     prod:expr → funcName ( exprs )
REDUCE        forward:greaterEquals         prod:expr → funcName ( exprs )
REDUCE        forward:lessEquals            prod:expr → funcName ( exprs )

group 78:
<expr → $new arrDef ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<arrDef → arrDef · [ expr ], [), }, [, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:expr → $new arrDef
REDUCE        forward:}                     prod:expr → $new arrDef
REDUCE        forward:,                     prod:expr → $new arrDef
REDUCE        forward:]                     prod:expr → $new arrDef
REDUCE        forward:;                     prod:expr → $new arrDef
REDUCE        forward:+                     prod:expr → $new arrDef
REDUCE        forward:-                     prod:expr → $new arrDef
REDUCE        forward:*                     prod:expr → $new arrDef
REDUCE        forward:/                     prod:expr → $new arrDef
REDUCE        forward:rShift                prod:expr → $new arrDef
REDUCE        forward:lShift                prod:expr → $new arrDef
REDUCE        forward:^                     prod:expr → $new arrDef
REDUCE        forward:&                     prod:expr → $new arrDef
REDUCE        forward:|                     prod:expr → $new arrDef
REDUCE        forward:sAnd                  prod:expr → $new arrDef
REDUCE        forward:sOr                   prod:expr → $new arrDef
REDUCE        forward:equals                prod:expr → $new arrDef
REDUCE        forward:>                     prod:expr → $new arrDef
REDUCE        forward:<                     prod:expr → $new arrDef
REDUCE        forward:greaterEquals         prod:expr → $new arrDef
REDUCE        forward:lessEquals            prod:expr → $new arrDef
SHIFT         input:[                       next:80

group 79:
<arrDef → baseType ·, [), }, [, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:arrDef → baseType
REDUCE        forward:}                     prod:arrDef → baseType
REDUCE        forward:[                     prod:arrDef → baseType
REDUCE        forward:,                     prod:arrDef → baseType
REDUCE        forward:]                     prod:arrDef → baseType
REDUCE        forward:;                     prod:arrDef → baseType
REDUCE        forward:+                     prod:arrDef → baseType
REDUCE        forward:-                     prod:arrDef → baseType
REDUCE        forward:*                     prod:arrDef → baseType
REDUCE        forward:/                     prod:arrDef → baseType
REDUCE        forward:rShift                prod:arrDef → baseType
REDUCE        forward:lShift                prod:arrDef → baseType
REDUCE        forward:^                     prod:arrDef → baseType
REDUCE        forward:&                     prod:arrDef → baseType
REDUCE        forward:|                     prod:arrDef → baseType
REDUCE        forward:sAnd                  prod:arrDef → baseType
REDUCE        forward:sOr                   prod:arrDef → baseType
REDUCE        forward:equals                prod:arrDef → baseType
REDUCE        forward:>                     prod:arrDef → baseType
REDUCE        forward:<                     prod:arrDef → baseType
REDUCE        forward:greaterEquals         prod:arrDef → baseType
REDUCE        forward:lessEquals            prod:arrDef → baseType

group 80:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<expr → · expr + expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [[, ], doublePlus, doubleMinus]>
<arrDef → arrDef [ · expr ], [), }, [, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · var [ expr ], [[, ], doublePlus, doubleMinus]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:81
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 81:
<expr → expr · rShift expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<arrDef → arrDef [ expr · ], [), }, [, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [], +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:]                       next:82
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 82:
<arrDef → arrDef [ expr ] ·, [), }, [, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:arrDef → arrDef [ expr ]
REDUCE        forward:}                     prod:arrDef → arrDef [ expr ]
REDUCE        forward:[                     prod:arrDef → arrDef [ expr ]
REDUCE        forward:,                     prod:arrDef → arrDef [ expr ]
REDUCE        forward:]                     prod:arrDef → arrDef [ expr ]
REDUCE        forward:;                     prod:arrDef → arrDef [ expr ]
REDUCE        forward:+                     prod:arrDef → arrDef [ expr ]
REDUCE        forward:-                     prod:arrDef → arrDef [ expr ]
REDUCE        forward:*                     prod:arrDef → arrDef [ expr ]
REDUCE        forward:/                     prod:arrDef → arrDef [ expr ]
REDUCE        forward:rShift                prod:arrDef → arrDef [ expr ]
REDUCE        forward:lShift                prod:arrDef → arrDef [ expr ]
REDUCE        forward:^                     prod:arrDef → arrDef [ expr ]
REDUCE        forward:&                     prod:arrDef → arrDef [ expr ]
REDUCE        forward:|                     prod:arrDef → arrDef [ expr ]
REDUCE        forward:sAnd                  prod:arrDef → arrDef [ expr ]
REDUCE        forward:sOr                   prod:arrDef → arrDef [ expr ]
REDUCE        forward:equals                prod:arrDef → arrDef [ expr ]
REDUCE        forward:>                     prod:arrDef → arrDef [ expr ]
REDUCE        forward:<                     prod:arrDef → arrDef [ expr ]
REDUCE        forward:greaterEquals         prod:arrDef → arrDef [ expr ]
REDUCE        forward:lessEquals            prod:arrDef → arrDef [ expr ]

group 83:
<expr → { exprs · }, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:}                       next:84

group 84:
<expr → { exprs } ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:expr → { exprs }
REDUCE        forward:}                     prod:expr → { exprs }
REDUCE        forward:,                     prod:expr → { exprs }
REDUCE        forward:]                     prod:expr → { exprs }
REDUCE        forward:;                     prod:expr → { exprs }
REDUCE        forward:+                     prod:expr → { exprs }
REDUCE        forward:-                     prod:expr → { exprs }
REDUCE        forward:*                     prod:expr → { exprs }
REDUCE        forward:/                     prod:expr → { exprs }
REDUCE        forward:rShift                prod:expr → { exprs }
REDUCE        forward:lShift                prod:expr → { exprs }
REDUCE        forward:^                     prod:expr → { exprs }
REDUCE        forward:&                     prod:expr → { exprs }
REDUCE        forward:|                     prod:expr → { exprs }
REDUCE        forward:sAnd                  prod:expr → { exprs }
REDUCE        forward:sOr                   prod:expr → { exprs }
REDUCE        forward:equals                prod:expr → { exprs }
REDUCE        forward:>                     prod:expr → { exprs }
REDUCE        forward:<                     prod:expr → { exprs }
REDUCE        forward:greaterEquals         prod:expr → { exprs }
REDUCE        forward:lessEquals            prod:expr → { exprs }

group 85:
<expr → expr · rShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → ( expr · ), [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:)                       next:86
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 86:
<expr → ( expr ) ·, [), }, ,, ], ;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
REDUCE        forward:)                     prod:expr → ( expr )
REDUCE        forward:}                     prod:expr → ( expr )
REDUCE        forward:,                     prod:expr → ( expr )
REDUCE        forward:]                     prod:expr → ( expr )
REDUCE        forward:;                     prod:expr → ( expr )
REDUCE        forward:+                     prod:expr → ( expr )
REDUCE        forward:-                     prod:expr → ( expr )
REDUCE        forward:*                     prod:expr → ( expr )
REDUCE        forward:/                     prod:expr → ( expr )
REDUCE        forward:rShift                prod:expr → ( expr )
REDUCE        forward:lShift                prod:expr → ( expr )
REDUCE        forward:^                     prod:expr → ( expr )
REDUCE        forward:&                     prod:expr → ( expr )
REDUCE        forward:|                     prod:expr → ( expr )
REDUCE        forward:sAnd                  prod:expr → ( expr )
REDUCE        forward:sOr                   prod:expr → ( expr )
REDUCE        forward:equals                prod:expr → ( expr )
REDUCE        forward:>                     prod:expr → ( expr )
REDUCE        forward:<                     prod:expr → ( expr )
REDUCE        forward:greaterEquals         prod:expr → ( expr )
REDUCE        forward:lessEquals            prod:expr → ( expr )

group 87:
<field → type fieldName · ;, [$END$, (, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<field → type fieldName · = expr ;, [$END$, (, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
SHIFT         input:;                       next:141
SHIFT         input:=                       next:142

group 88:
<type → type [ · ], [[, id]>
SHIFT         input:]                       next:140

group 89:
<func → type funcName · ( funcArgDef ) { stmts }, [$END$, id, $int, $double, $bool, $string, $void]>
SHIFT         input:(                       next:90

group 90:
<type → · baseType, [[, id]>
<func → type funcName ( · funcArgDef ) { stmts }, [$END$, id, $int, $double, $bool, $string, $void]>
<type → · type [ ], [[, id]>
<baseType → · $int, [[, id]>
<baseType → · $double, [[, id]>
<baseType → · $bool, [[, id]>
<funcArgDef → · ε, [)]>
<baseType → · $string, [[, id]>
<funcArgDef → · funcArgList, [)]>
<baseType → · $void, [[, id]>
<funcArgList → · argDef, [), ,]>
<funcArgList → · funcArgList , argDef, [), ,]>
<argDef → · type id, [), ,]>
GOTO          input:baseType                to:14
GOTO          input:funcArgDef              to:92
GOTO          input:type                    to:91
SHIFT         input:$int                    next:8
SHIFT         input:$double                 next:9
SHIFT         input:$bool                   next:10
REDUCE        forward:)                     prod:funcArgDef → ε
SHIFT         input:$string                 next:11
GOTO          input:funcArgList             to:93
SHIFT         input:$void                   next:12
GOTO          input:argDef                  to:94

group 91:
<type → type · [ ], [[, id]>
<argDef → type · id, [), ,]>
SHIFT         input:[                       next:88
SHIFT         input:id                      next:139

group 92:
<func → type funcName ( funcArgDef · ) { stmts }, [$END$, id, $int, $double, $bool, $string, $void]>
SHIFT         input:)                       next:97

group 93:
<funcArgDef → funcArgList ·, [)]>
<funcArgList → funcArgList · , argDef, [), ,]>
REDUCE        forward:)                     prod:funcArgDef → funcArgList
SHIFT         input:,                       next:95

group 94:
<funcArgList → argDef ·, [), ,]>
REDUCE        forward:)                     prod:funcArgList → argDef
REDUCE        forward:,                     prod:funcArgList → argDef

group 95:
<type → · baseType, [[, id]>
<type → · type [ ], [[, id]>
<baseType → · $int, [[, id]>
<baseType → · $double, [[, id]>
<baseType → · $bool, [[, id]>
<baseType → · $string, [[, id]>
<funcArgList → funcArgList , · argDef, [), ,]>
<baseType → · $void, [[, id]>
<argDef → · type id, [), ,]>
GOTO          input:baseType                to:14
GOTO          input:type                    to:91
SHIFT         input:$int                    next:8
SHIFT         input:$double                 next:9
SHIFT         input:$bool                   next:10
SHIFT         input:$string                 next:11
GOTO          input:argDef                  to:96
SHIFT         input:$void                   next:12

group 96:
<funcArgList → funcArgList , argDef ·, [), ,]>
REDUCE        forward:)                     prod:funcArgList → funcArgList , argDef
REDUCE        forward:,                     prod:funcArgList → funcArgList , argDef

group 97:
<func → type funcName ( funcArgDef ) · { stmts }, [$END$, id, $int, $double, $bool, $string, $void]>
SHIFT         input:{                       next:98

group 98:
<func → type funcName ( funcArgDef ) { · stmts }, [$END$, id, $int, $double, $bool, $string, $void]>
<type → · baseType, [[, id]>
<type → · type [ ], [[, id]>
<baseType → · $int, [[, id]>
<baseType → · $double, [[, id]>
<baseType → · $bool, [[, id]>
<baseType → · $string, [[, id]>
<baseType → · $void, [[, id]>
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus, =]>
<stmts → · stmtList, [}]>
<stmts → · ε, [}]>
<stmtList → · stmt, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmtList → · stmtList stmt, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · field, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · $if ( expr ) stmt, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · ( expr ) stmt $else stmt, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · $while ( expr ) stmt, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · { stmts }, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · $return expr ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · funcName ( exprs ) ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · var doublePlus ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · var doubleMinus ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<field → · type fieldName ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<field → · type fieldName = expr ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<field → · fieldName = expr ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<var → · fieldName, [[, doublePlus, doubleMinus]>
<var → · var [ expr ], [[, doublePlus, doubleMinus]>
GOTO          input:stmts                   to:105
GOTO          input:baseType                to:14
GOTO          input:type                    to:102
SHIFT         input:$int                    next:8
SHIFT         input:$double                 next:9
SHIFT         input:$bool                   next:10
SHIFT         input:$string                 next:11
SHIFT         input:$void                   next:12
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:stmtList                to:108
REDUCE        forward:}                     prod:stmts → ε
GOTO          input:stmt                    to:109
GOTO          input:field                   to:101
SHIFT         input:$if                     next:104
SHIFT         input:(                       next:99
SHIFT         input:$while                  next:106
SHIFT         input:{                       next:100
SHIFT         input:$return                 next:107
GOTO          input:funcName                to:103
GOTO          input:var                     to:110
GOTO          input:fieldName               to:111

group 99:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<stmt → ( · expr ) stmt $else stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<expr → · expr + expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), [, doublePlus, doubleMinus]>
<var → · var [ expr ], [), [, doublePlus, doubleMinus]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:134
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 100:
<type → · baseType, [[, id]>
<type → · type [ ], [[, id]>
<baseType → · $int, [[, id]>
<baseType → · $double, [[, id]>
<baseType → · $bool, [[, id]>
<baseType → · $string, [[, id]>
<baseType → · $void, [[, id]>
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus, =]>
<stmts → · stmtList, [}]>
<stmts → · ε, [}]>
<stmtList → · stmt, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmtList → · stmtList stmt, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · field, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · $if ( expr ) stmt, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · ( expr ) stmt $else stmt, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → { · stmts }, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · $while ( expr ) stmt, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · { stmts }, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · $return expr ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · funcName ( exprs ) ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · var doublePlus ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · var doubleMinus ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<field → · type fieldName ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<field → · type fieldName = expr ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<field → · fieldName = expr ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<var → · fieldName, [[, doublePlus, doubleMinus]>
<var → · var [ expr ], [[, doublePlus, doubleMinus]>
GOTO          input:baseType                to:14
GOTO          input:type                    to:102
SHIFT         input:$int                    next:8
SHIFT         input:$double                 next:9
SHIFT         input:$bool                   next:10
SHIFT         input:$string                 next:11
SHIFT         input:$void                   next:12
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:stmtList                to:108
REDUCE        forward:}                     prod:stmts → ε
GOTO          input:stmt                    to:109
GOTO          input:field                   to:101
SHIFT         input:$if                     next:104
SHIFT         input:(                       next:99
GOTO          input:stmts                   to:132
SHIFT         input:$while                  next:106
SHIFT         input:{                       next:100
SHIFT         input:$return                 next:107
GOTO          input:funcName                to:103
GOTO          input:var                     to:110
GOTO          input:fieldName               to:111

group 101:
<stmt → field ·, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
REDUCE        forward:(                     prod:stmt → field
REDUCE        forward:{                     prod:stmt → field
REDUCE        forward:}                     prod:stmt → field
REDUCE        forward:id                    prod:stmt → field
REDUCE        forward:$int                  prod:stmt → field
REDUCE        forward:$if                   prod:stmt → field
REDUCE        forward:$double               prod:stmt → field
REDUCE        forward:$else                 prod:stmt → field
REDUCE        forward:$bool                 prod:stmt → field
REDUCE        forward:$while                prod:stmt → field
REDUCE        forward:$string               prod:stmt → field
REDUCE        forward:$return               prod:stmt → field
REDUCE        forward:$void                 prod:stmt → field

group 102:
<type → type · [ ], [[, id]>
<field → type · fieldName = expr ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<field → type · fieldName ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<fieldName → · id, [;, =]>
SHIFT         input:[                       next:88
GOTO          input:fieldName               to:87
SHIFT         input:id                      next:7

group 103:
<stmt → funcName · ( exprs ) ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
SHIFT         input:(                       next:128

group 104:
<stmt → $if · ( expr ) stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
SHIFT         input:(                       next:124

group 105:
<func → type funcName ( funcArgDef ) { stmts · }, [$END$, id, $int, $double, $bool, $string, $void]>
SHIFT         input:}                       next:123

group 106:
<stmt → $while · ( expr ) stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
SHIFT         input:(                       next:119

group 107:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<stmt → $return · expr ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<expr → · expr + expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [[, ;, doublePlus, doubleMinus]>
<var → · var [ expr ], [[, ;, doublePlus, doubleMinus]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:117
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 108:
<type → · baseType, [[, id]>
<type → · type [ ], [[, id]>
<baseType → · $int, [[, id]>
<baseType → · $double, [[, id]>
<baseType → · $bool, [[, id]>
<baseType → · $string, [[, id]>
<baseType → · $void, [[, id]>
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus, =]>
<stmts → stmtList ·, [}]>
<stmtList → stmtList · stmt, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · field, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · $if ( expr ) stmt, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · ( expr ) stmt $else stmt, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · $while ( expr ) stmt, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · { stmts }, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · $return expr ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · funcName ( exprs ) ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · var doublePlus ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<stmt → · var doubleMinus ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<field → · type fieldName ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<field → · type fieldName = expr ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<field → · fieldName = expr ;, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
<var → · fieldName, [[, doublePlus, doubleMinus]>
<var → · var [ expr ], [[, doublePlus, doubleMinus]>
GOTO          input:baseType                to:14
GOTO          input:type                    to:102
SHIFT         input:$int                    next:8
SHIFT         input:$double                 next:9
SHIFT         input:$bool                   next:10
SHIFT         input:$string                 next:11
SHIFT         input:$void                   next:12
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
REDUCE        forward:}                     prod:stmts → stmtList
GOTO          input:stmt                    to:116
GOTO          input:field                   to:101
SHIFT         input:$if                     next:104
SHIFT         input:(                       next:99
SHIFT         input:$while                  next:106
SHIFT         input:{                       next:100
SHIFT         input:$return                 next:107
GOTO          input:funcName                to:103
GOTO          input:var                     to:110
GOTO          input:fieldName               to:111

group 109:
<stmtList → stmt ·, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
REDUCE        forward:(                     prod:stmtList → stmt
REDUCE        forward:{                     prod:stmtList → stmt
REDUCE        forward:}                     prod:stmtList → stmt
REDUCE        forward:id                    prod:stmtList → stmt
REDUCE        forward:$int                  prod:stmtList → stmt
REDUCE        forward:$if                   prod:stmtList → stmt
REDUCE        forward:$double               prod:stmtList → stmt
REDUCE        forward:$bool                 prod:stmtList → stmt
REDUCE        forward:$while                prod:stmtList → stmt
REDUCE        forward:$string               prod:stmtList → stmt
REDUCE        forward:$return               prod:stmtList → stmt
REDUCE        forward:$void                 prod:stmtList → stmt

group 110:
<stmt → var · doubleMinus ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → var · doublePlus ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<var → var · [ expr ], [[, doublePlus, doubleMinus]>
SHIFT         input:doubleMinus             next:113
SHIFT         input:doublePlus              next:112
SHIFT         input:[                       next:64

group 111:
<var → fieldName ·, [[, doublePlus, doubleMinus]>
<field → fieldName · = expr ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
REDUCE        forward:[                     prod:var → fieldName
REDUCE        forward:doublePlus            prod:var → fieldName
REDUCE        forward:doubleMinus           prod:var → fieldName
SHIFT         input:=                       next:15

group 112:
<stmt → var doublePlus · ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
SHIFT         input:;                       next:115

group 113:
<stmt → var doubleMinus · ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
SHIFT         input:;                       next:114

group 114:
<stmt → var doubleMinus ; ·, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
REDUCE        forward:(                     prod:stmt → var doubleMinus ;
REDUCE        forward:{                     prod:stmt → var doubleMinus ;
REDUCE        forward:}                     prod:stmt → var doubleMinus ;
REDUCE        forward:id                    prod:stmt → var doubleMinus ;
REDUCE        forward:$int                  prod:stmt → var doubleMinus ;
REDUCE        forward:$if                   prod:stmt → var doubleMinus ;
REDUCE        forward:$double               prod:stmt → var doubleMinus ;
REDUCE        forward:$else                 prod:stmt → var doubleMinus ;
REDUCE        forward:$bool                 prod:stmt → var doubleMinus ;
REDUCE        forward:$while                prod:stmt → var doubleMinus ;
REDUCE        forward:$string               prod:stmt → var doubleMinus ;
REDUCE        forward:$return               prod:stmt → var doubleMinus ;
REDUCE        forward:$void                 prod:stmt → var doubleMinus ;

group 115:
<stmt → var doublePlus ; ·, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
REDUCE        forward:(                     prod:stmt → var doublePlus ;
REDUCE        forward:{                     prod:stmt → var doublePlus ;
REDUCE        forward:}                     prod:stmt → var doublePlus ;
REDUCE        forward:id                    prod:stmt → var doublePlus ;
REDUCE        forward:$int                  prod:stmt → var doublePlus ;
REDUCE        forward:$if                   prod:stmt → var doublePlus ;
REDUCE        forward:$double               prod:stmt → var doublePlus ;
REDUCE        forward:$else                 prod:stmt → var doublePlus ;
REDUCE        forward:$bool                 prod:stmt → var doublePlus ;
REDUCE        forward:$while                prod:stmt → var doublePlus ;
REDUCE        forward:$string               prod:stmt → var doublePlus ;
REDUCE        forward:$return               prod:stmt → var doublePlus ;
REDUCE        forward:$void                 prod:stmt → var doublePlus ;

group 116:
<stmtList → stmtList stmt ·, [(, {, }, id, $int, $if, $double, $bool, $while, $string, $return, $void]>
REDUCE        forward:(                     prod:stmtList → stmtList stmt
REDUCE        forward:{                     prod:stmtList → stmtList stmt
REDUCE        forward:}                     prod:stmtList → stmtList stmt
REDUCE        forward:id                    prod:stmtList → stmtList stmt
REDUCE        forward:$int                  prod:stmtList → stmtList stmt
REDUCE        forward:$if                   prod:stmtList → stmtList stmt
REDUCE        forward:$double               prod:stmtList → stmtList stmt
REDUCE        forward:$bool                 prod:stmtList → stmtList stmt
REDUCE        forward:$while                prod:stmtList → stmtList stmt
REDUCE        forward:$string               prod:stmtList → stmtList stmt
REDUCE        forward:$return               prod:stmtList → stmtList stmt
REDUCE        forward:$void                 prod:stmtList → stmtList stmt

group 117:
<expr → expr · rShift expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<stmt → $return expr · ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<expr → expr · + expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:;                       next:118
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 118:
<stmt → $return expr ; ·, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
REDUCE        forward:(                     prod:stmt → $return expr ;
REDUCE        forward:{                     prod:stmt → $return expr ;
REDUCE        forward:}                     prod:stmt → $return expr ;
REDUCE        forward:id                    prod:stmt → $return expr ;
REDUCE        forward:$int                  prod:stmt → $return expr ;
REDUCE        forward:$if                   prod:stmt → $return expr ;
REDUCE        forward:$double               prod:stmt → $return expr ;
REDUCE        forward:$else                 prod:stmt → $return expr ;
REDUCE        forward:$bool                 prod:stmt → $return expr ;
REDUCE        forward:$while                prod:stmt → $return expr ;
REDUCE        forward:$string               prod:stmt → $return expr ;
REDUCE        forward:$return               prod:stmt → $return expr ;
REDUCE        forward:$void                 prod:stmt → $return expr ;

group 119:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<stmt → $while ( · expr ) stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<expr → · expr + expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), [, doublePlus, doubleMinus]>
<var → · var [ expr ], [), [, doublePlus, doubleMinus]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:120
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 120:
<expr → expr · rShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<stmt → $while ( expr · ) stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<expr → expr · + expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:)                       next:121
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 121:
<type → · baseType, [[, id]>
<type → · type [ ], [[, id]>
<baseType → · $int, [[, id]>
<baseType → · $double, [[, id]>
<baseType → · $bool, [[, id]>
<baseType → · $string, [[, id]>
<baseType → · $void, [[, id]>
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus, =]>
<stmt → $while ( expr ) · stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · field, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · $if ( expr ) stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · ( expr ) stmt $else stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · $while ( expr ) stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · { stmts }, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · $return expr ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · funcName ( exprs ) ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · var doublePlus ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · var doubleMinus ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<field → · type fieldName ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<var → · fieldName, [[, doublePlus, doubleMinus]>
<field → · type fieldName = expr ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<var → · var [ expr ], [[, doublePlus, doubleMinus]>
<field → · fieldName = expr ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
GOTO          input:baseType                to:14
GOTO          input:type                    to:102
SHIFT         input:$int                    next:8
SHIFT         input:$double                 next:9
SHIFT         input:$bool                   next:10
SHIFT         input:$string                 next:11
SHIFT         input:$void                   next:12
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:stmt                    to:122
GOTO          input:field                   to:101
SHIFT         input:$if                     next:104
SHIFT         input:(                       next:99
SHIFT         input:$while                  next:106
SHIFT         input:{                       next:100
SHIFT         input:$return                 next:107
GOTO          input:funcName                to:103
GOTO          input:var                     to:110
GOTO          input:fieldName               to:111

group 122:
<stmt → $while ( expr ) stmt ·, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
REDUCE        forward:(                     prod:stmt → $while ( expr ) stmt
REDUCE        forward:{                     prod:stmt → $while ( expr ) stmt
REDUCE        forward:}                     prod:stmt → $while ( expr ) stmt
REDUCE        forward:id                    prod:stmt → $while ( expr ) stmt
REDUCE        forward:$int                  prod:stmt → $while ( expr ) stmt
REDUCE        forward:$if                   prod:stmt → $while ( expr ) stmt
REDUCE        forward:$double               prod:stmt → $while ( expr ) stmt
REDUCE        forward:$else                 prod:stmt → $while ( expr ) stmt
REDUCE        forward:$bool                 prod:stmt → $while ( expr ) stmt
REDUCE        forward:$while                prod:stmt → $while ( expr ) stmt
REDUCE        forward:$string               prod:stmt → $while ( expr ) stmt
REDUCE        forward:$return               prod:stmt → $while ( expr ) stmt
REDUCE        forward:$void                 prod:stmt → $while ( expr ) stmt

group 123:
<func → type funcName ( funcArgDef ) { stmts } ·, [$END$, id, $int, $double, $bool, $string, $void]>
REDUCE        forward:$END$                 prod:func → type funcName ( funcArgDef ) { stmts }
REDUCE        forward:id                    prod:func → type funcName ( funcArgDef ) { stmts }
REDUCE        forward:$int                  prod:func → type funcName ( funcArgDef ) { stmts }
REDUCE        forward:$double               prod:func → type funcName ( funcArgDef ) { stmts }
REDUCE        forward:$bool                 prod:func → type funcName ( funcArgDef ) { stmts }
REDUCE        forward:$string               prod:func → type funcName ( funcArgDef ) { stmts }
REDUCE        forward:$void                 prod:func → type funcName ( funcArgDef ) { stmts }

group 124:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<stmt → $if ( · expr ) stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<expr → · expr + expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), [, doublePlus, doubleMinus]>
<var → · var [ expr ], [), [, doublePlus, doubleMinus]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:125
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 125:
<expr → expr · rShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<stmt → $if ( expr · ) stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<expr → expr · + expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:)                       next:126
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 126:
<type → · baseType, [[, id]>
<type → · type [ ], [[, id]>
<baseType → · $int, [[, id]>
<baseType → · $double, [[, id]>
<baseType → · $bool, [[, id]>
<baseType → · $string, [[, id]>
<baseType → · $void, [[, id]>
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus, =]>
<stmt → · field, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · $if ( expr ) stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · ( expr ) stmt $else stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · $while ( expr ) stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · { stmts }, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → $if ( expr ) · stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · $return expr ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · funcName ( exprs ) ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · var doublePlus ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · var doubleMinus ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<field → · type fieldName ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<var → · fieldName, [[, doublePlus, doubleMinus]>
<field → · type fieldName = expr ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<var → · var [ expr ], [[, doublePlus, doubleMinus]>
<field → · fieldName = expr ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
GOTO          input:baseType                to:14
GOTO          input:type                    to:102
SHIFT         input:$int                    next:8
SHIFT         input:$double                 next:9
SHIFT         input:$bool                   next:10
SHIFT         input:$string                 next:11
SHIFT         input:$void                   next:12
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:field                   to:101
SHIFT         input:$if                     next:104
SHIFT         input:(                       next:99
SHIFT         input:$while                  next:106
SHIFT         input:{                       next:100
GOTO          input:stmt                    to:127
SHIFT         input:$return                 next:107
GOTO          input:funcName                to:103
GOTO          input:var                     to:110
GOTO          input:fieldName               to:111

group 127:
<stmt → $if ( expr ) stmt ·, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
REDUCE        forward:(                     prod:stmt → $if ( expr ) stmt
REDUCE        forward:{                     prod:stmt → $if ( expr ) stmt
REDUCE        forward:}                     prod:stmt → $if ( expr ) stmt
REDUCE        forward:id                    prod:stmt → $if ( expr ) stmt
REDUCE        forward:$int                  prod:stmt → $if ( expr ) stmt
REDUCE        forward:$if                   prod:stmt → $if ( expr ) stmt
REDUCE        forward:$double               prod:stmt → $if ( expr ) stmt
REDUCE        forward:$else                 prod:stmt → $if ( expr ) stmt
REDUCE        forward:$bool                 prod:stmt → $if ( expr ) stmt
REDUCE        forward:$while                prod:stmt → $if ( expr ) stmt
REDUCE        forward:$string               prod:stmt → $if ( expr ) stmt
REDUCE        forward:$return               prod:stmt → $if ( expr ) stmt
REDUCE        forward:$void                 prod:stmt → $if ( expr ) stmt

group 128:
<exprs → · ε, [)]>
<exprList → · exprList , expr, [), ,]>
<exprList → · expr, [), ,]>
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<stmt → funcName ( · exprs ) ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<expr → · expr + expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [), [, doublePlus, doubleMinus]>
<var → · var [ expr ], [), [, doublePlus, doubleMinus]>
<exprs → · exprList, [)]>
REDUCE        forward:)                     prod:exprs → ε
GOTO          input:exprList                to:74
GOTO          input:expr                    to:72
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:exprs                   to:129
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 129:
<stmt → funcName ( exprs · ) ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
SHIFT         input:)                       next:130

group 130:
<stmt → funcName ( exprs ) · ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
SHIFT         input:;                       next:131

group 131:
<stmt → funcName ( exprs ) ; ·, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
REDUCE        forward:(                     prod:stmt → funcName ( exprs ) ;
REDUCE        forward:{                     prod:stmt → funcName ( exprs ) ;
REDUCE        forward:}                     prod:stmt → funcName ( exprs ) ;
REDUCE        forward:id                    prod:stmt → funcName ( exprs ) ;
REDUCE        forward:$int                  prod:stmt → funcName ( exprs ) ;
REDUCE        forward:$if                   prod:stmt → funcName ( exprs ) ;
REDUCE        forward:$double               prod:stmt → funcName ( exprs ) ;
REDUCE        forward:$else                 prod:stmt → funcName ( exprs ) ;
REDUCE        forward:$bool                 prod:stmt → funcName ( exprs ) ;
REDUCE        forward:$while                prod:stmt → funcName ( exprs ) ;
REDUCE        forward:$string               prod:stmt → funcName ( exprs ) ;
REDUCE        forward:$return               prod:stmt → funcName ( exprs ) ;
REDUCE        forward:$void                 prod:stmt → funcName ( exprs ) ;

group 132:
<stmt → { stmts · }, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
SHIFT         input:}                       next:133

group 133:
<stmt → { stmts } ·, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
REDUCE        forward:(                     prod:stmt → { stmts }
REDUCE        forward:{                     prod:stmt → { stmts }
REDUCE        forward:}                     prod:stmt → { stmts }
REDUCE        forward:id                    prod:stmt → { stmts }
REDUCE        forward:$int                  prod:stmt → { stmts }
REDUCE        forward:$if                   prod:stmt → { stmts }
REDUCE        forward:$double               prod:stmt → { stmts }
REDUCE        forward:$else                 prod:stmt → { stmts }
REDUCE        forward:$bool                 prod:stmt → { stmts }
REDUCE        forward:$while                prod:stmt → { stmts }
REDUCE        forward:$string               prod:stmt → { stmts }
REDUCE        forward:$return               prod:stmt → { stmts }
REDUCE        forward:$void                 prod:stmt → { stmts }

group 134:
<expr → expr · rShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<stmt → ( expr · ) stmt $else stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<expr → expr · + expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · - expr, [), +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:)                       next:135
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:-                       next:33

group 135:
<type → · baseType, [[, id]>
<type → · type [ ], [[, id]>
<baseType → · $int, [[, id]>
<baseType → · $double, [[, id]>
<baseType → · $bool, [[, id]>
<baseType → · $string, [[, id]>
<baseType → · $void, [[, id]>
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus, =]>
<stmt → ( expr ) · stmt $else stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · field, [$else]>
<stmt → · $if ( expr ) stmt, [$else]>
<stmt → · ( expr ) stmt $else stmt, [$else]>
<stmt → · $while ( expr ) stmt, [$else]>
<stmt → · { stmts }, [$else]>
<stmt → · $return expr ;, [$else]>
<stmt → · funcName ( exprs ) ;, [$else]>
<stmt → · var doublePlus ;, [$else]>
<stmt → · var doubleMinus ;, [$else]>
<field → · type fieldName ;, [$else]>
<var → · fieldName, [[, doublePlus, doubleMinus]>
<field → · type fieldName = expr ;, [$else]>
<var → · var [ expr ], [[, doublePlus, doubleMinus]>
<field → · fieldName = expr ;, [$else]>
GOTO          input:baseType                to:14
GOTO          input:type                    to:102
SHIFT         input:$int                    next:8
SHIFT         input:$double                 next:9
SHIFT         input:$bool                   next:10
SHIFT         input:$string                 next:11
SHIFT         input:$void                   next:12
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:stmt                    to:136
GOTO          input:field                   to:101
SHIFT         input:$if                     next:104
SHIFT         input:(                       next:99
SHIFT         input:$while                  next:106
SHIFT         input:{                       next:100
SHIFT         input:$return                 next:107
GOTO          input:funcName                to:103
GOTO          input:var                     to:110
GOTO          input:fieldName               to:111

group 136:
<stmt → ( expr ) stmt · $else stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
SHIFT         input:$else                   next:137

group 137:
<type → · baseType, [[, id]>
<type → · type [ ], [[, id]>
<baseType → · $int, [[, id]>
<baseType → · $double, [[, id]>
<baseType → · $bool, [[, id]>
<baseType → · $string, [[, id]>
<baseType → · $void, [[, id]>
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus, =]>
<stmt → · field, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · $if ( expr ) stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · ( expr ) stmt $else stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · $while ( expr ) stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · { stmts }, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → ( expr ) stmt $else · stmt, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · $return expr ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · funcName ( exprs ) ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · var doublePlus ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<stmt → · var doubleMinus ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<field → · type fieldName ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<var → · fieldName, [[, doublePlus, doubleMinus]>
<field → · type fieldName = expr ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<var → · var [ expr ], [[, doublePlus, doubleMinus]>
<field → · fieldName = expr ;, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
GOTO          input:baseType                to:14
GOTO          input:type                    to:102
SHIFT         input:$int                    next:8
SHIFT         input:$double                 next:9
SHIFT         input:$bool                   next:10
SHIFT         input:$string                 next:11
SHIFT         input:$void                   next:12
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:field                   to:101
SHIFT         input:$if                     next:104
SHIFT         input:(                       next:99
SHIFT         input:$while                  next:106
SHIFT         input:{                       next:100
GOTO          input:stmt                    to:138
SHIFT         input:$return                 next:107
GOTO          input:funcName                to:103
GOTO          input:var                     to:110
GOTO          input:fieldName               to:111

group 138:
<stmt → ( expr ) stmt $else stmt ·, [(, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
REDUCE        forward:(                     prod:stmt → ( expr ) stmt $else stmt
REDUCE        forward:{                     prod:stmt → ( expr ) stmt $else stmt
REDUCE        forward:}                     prod:stmt → ( expr ) stmt $else stmt
REDUCE        forward:id                    prod:stmt → ( expr ) stmt $else stmt
REDUCE        forward:$int                  prod:stmt → ( expr ) stmt $else stmt
REDUCE        forward:$if                   prod:stmt → ( expr ) stmt $else stmt
REDUCE        forward:$double               prod:stmt → ( expr ) stmt $else stmt
REDUCE        forward:$else                 prod:stmt → ( expr ) stmt $else stmt
REDUCE        forward:$bool                 prod:stmt → ( expr ) stmt $else stmt
REDUCE        forward:$while                prod:stmt → ( expr ) stmt $else stmt
REDUCE        forward:$string               prod:stmt → ( expr ) stmt $else stmt
REDUCE        forward:$return               prod:stmt → ( expr ) stmt $else stmt
REDUCE        forward:$void                 prod:stmt → ( expr ) stmt $else stmt

group 139:
<argDef → type id ·, [), ,]>
REDUCE        forward:)                     prod:argDef → type id
REDUCE        forward:,                     prod:argDef → type id

group 140:
<type → type [ ] ·, [[, id]>
REDUCE        forward:[                     prod:type → type [ ]
REDUCE        forward:id                    prod:type → type [ ]

group 141:
<field → type fieldName ; ·, [$END$, (, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
REDUCE        forward:$END$                 prod:field → type fieldName ;
REDUCE        forward:(                     prod:field → type fieldName ;
REDUCE        forward:{                     prod:field → type fieldName ;
REDUCE        forward:}                     prod:field → type fieldName ;
REDUCE        forward:id                    prod:field → type fieldName ;
REDUCE        forward:$int                  prod:field → type fieldName ;
REDUCE        forward:$if                   prod:field → type fieldName ;
REDUCE        forward:$double               prod:field → type fieldName ;
REDUCE        forward:$else                 prod:field → type fieldName ;
REDUCE        forward:$bool                 prod:field → type fieldName ;
REDUCE        forward:$while                prod:field → type fieldName ;
REDUCE        forward:$string               prod:field → type fieldName ;
REDUCE        forward:$return               prod:field → type fieldName ;
REDUCE        forward:$void                 prod:field → type fieldName ;

group 142:
<funcName → · id, [(]>
<fieldName → · id, [[, doubleMinus]>
<field → type fieldName = · expr ;, [$END$, (, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<expr → · expr + expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr - expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr * expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr / expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr rShift expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lShift expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr ^ expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr & expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr | expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sAnd expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr sOr expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr equals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr > expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr < expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr greaterEquals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · expr lessEquals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · ( expr ), [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · + expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · - expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · funcName ( exprs ), [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · int, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · double, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $true, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $false, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · string, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · { exprs }, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doublePlus, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · var doubleMinus, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → · $new arrDef, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<var → · fieldName, [[, ;, doublePlus, doubleMinus]>
<var → · var [ expr ], [[, ;, doublePlus, doubleMinus]>
SHIFT         input:id                      next:23
SHIFT         input:id                      next:23
GOTO          input:expr                    to:143
SHIFT         input:(                       next:18
SHIFT         input:+                       next:26
SHIFT         input:-                       next:28
GOTO          input:funcName                to:24
SHIFT         input:int                     next:30
SHIFT         input:double                  next:16
SHIFT         input:$true                   next:17
SHIFT         input:$false                  next:19
SHIFT         input:string                  next:21
SHIFT         input:{                       next:20
GOTO          input:var                     to:27
SHIFT         input:$new                    next:22
GOTO          input:fieldName               to:29

group 143:
<expr → expr · rShift expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · / expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · ^ expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lShift expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · | expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · & expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sOr expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · sAnd expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · > expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · equals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · greaterEquals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · < expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · lessEquals expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · + expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<expr → expr · * expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
<field → type fieldName = expr · ;, [$END$, (, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
<expr → expr · - expr, [;, +, -, *, /, rShift, lShift, ^, &, |, sAnd, sOr, equals, >, <, greaterEquals, lessEquals]>
SHIFT         input:rShift                  next:36
SHIFT         input:/                       next:35
SHIFT         input:^                       next:38
SHIFT         input:lShift                  next:37
SHIFT         input:|                       next:40
SHIFT         input:&                       next:39
SHIFT         input:sOr                     next:42
SHIFT         input:sAnd                    next:41
SHIFT         input:>                       next:44
SHIFT         input:equals                  next:43
SHIFT         input:greaterEquals           next:46
SHIFT         input:<                       next:45
SHIFT         input:lessEquals              next:47
SHIFT         input:+                       next:32
SHIFT         input:*                       next:34
SHIFT         input:;                       next:144
SHIFT         input:-                       next:33

group 144:
<field → type fieldName = expr ; ·, [$END$, (, {, }, id, $int, $if, $double, $else, $bool, $while, $string, $return, $void]>
REDUCE        forward:$END$                 prod:field → type fieldName = expr ;
REDUCE        forward:(                     prod:field → type fieldName = expr ;
REDUCE        forward:{                     prod:field → type fieldName = expr ;
REDUCE        forward:}                     prod:field → type fieldName = expr ;
REDUCE        forward:id                    prod:field → type fieldName = expr ;
REDUCE        forward:$int                  prod:field → type fieldName = expr ;
REDUCE        forward:$if                   prod:field → type fieldName = expr ;
REDUCE        forward:$double               prod:field → type fieldName = expr ;
REDUCE        forward:$else                 prod:field → type fieldName = expr ;
REDUCE        forward:$bool                 prod:field → type fieldName = expr ;
REDUCE        forward:$while                prod:field → type fieldName = expr ;
REDUCE        forward:$string               prod:field → type fieldName = expr ;
REDUCE        forward:$return               prod:field → type fieldName = expr ;
REDUCE        forward:$void                 prod:field → type fieldName = expr ;

group 145:
<items → items item ·, [$END$, id, $int, $double, $bool, $string, $void]>
REDUCE        forward:$END$                 prod:items → items item
REDUCE        forward:id                    prod:items → items item
REDUCE        forward:$int                  prod:items → items item
REDUCE        forward:$double               prod:items → items item
REDUCE        forward:$bool                 prod:items → items item
REDUCE        forward:$string               prod:items → items item
REDUCE        forward:$void                 prod:items → items item
495
BUILD SUCCESSFUL in 1s
5 actionable tasks: 2 executed, 3 up-to-date
15:03:22: 执行完成 ':test --tests "javagen.TestInterpreterGen.test"'。
