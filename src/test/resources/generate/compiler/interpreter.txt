$token$
    sAnd: "&&";
    sOr: "\|\|";
    eq: "==";
    ge: ">=";
    le: "<=";
    id: "@a@u*";
    int: "0[xX]@h+|@d+";
    inc: "\+\+";
    dec: "--";
    assignInc: "\+=";
    assignDec: "-=";
$$

$syntax$
    script -> items | @~ ;
    items -> item
           | items item
           ;
    item -> field
          | func
          ;

    func -> funcDef '(' funcArgDef ')' '{' stmts '}' ;
    funcDef -> type @id ;
    funcArgDef -> @~ | funcArgList ;
    funcArgList -> fieldDef
                 | funcArgList ',' fieldDef
                 ;
    stmts -> stmtList
           | @~
           ;
    stmtList -> stmt
              | stmtList stmt
              ;
    stmt -> field
          | @$if '(' expr ')' ifCondEnd stmt ifEnd
          | @$if '(' expr ')' ifCondEnd stmt @$else $10 elseBegin stmt elseEnd
          | @$while '(' whileCondBegin expr ')' whileCondEnd stmt whileEnd
          | '{' stmts '}'
          | @$return expr ';'
          | @$return ';'
          | @id '(' exprs ')' ';'
          | var @inc ';'
          | var @dec ';'
          | var @assignInc expr ';'
          | var @assignDec expr ';'
          | @$continue ';'
          | @$break ';'
          ;
    ifCondEnd -> @~ ;
    ifEnd -> @~ ;
    elseEnd -> @~ ;
    whileCondBegin -> @~ ;
    whileCondEnd -> @~ ;
    whileEnd -> @~ ;
    field -> fieldDef ';'
           | fieldDef '=' $1 expr ';'
           | var '=' expr ';'
           ;
    fieldDef -> type fieldName ;
    expr -> expr '+' $5 expr
          | expr '-' $5 expr
          | expr '*' $10 expr
          | expr '/' $10 expr
          | expr @sAnd expr
          | expr @sOr expr
          | expr @eq $2 expr
          | expr '>' expr
          | expr '<' expr
          | expr @le expr
          | expr @ge expr
          | '(' expr ')'
          | '+' expr %20
          | '-' expr %20
          | @id '(' $2 exprs ')'
          | @int
          | @$true
          | @$false
          | arrConst
          | var %20
          | var @inc $1 %10
          | var @dec $1 %10
          | @inc var
          | @dec var
          | @$new arrDef
          ;
    var -> fieldName
         | varArrBegin expr ']' %20
         ;
    arrDef -> baseType
            | arrDef '[' expr ']' %20
            ;
    arrConst -> '{' arrContents '}' ;
    arrContents -> arrContents ',' expr
                 | expr
                 | @~
                 ;
    exprs -> exprList
           | @~
           ;
    exprList -> exprList ',' expr
              | expr
              ;
    type -> baseType
          | type '[' ']' %20
          ;
    baseType -> @$int
          | @$void
          ;
    fieldName -> @id ;
    elseBegin -> @~ ;
    varArrBegin -> var '[' $2 ;
$$